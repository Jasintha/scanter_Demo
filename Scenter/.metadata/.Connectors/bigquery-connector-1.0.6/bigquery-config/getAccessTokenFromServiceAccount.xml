<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<!-- Method Documentation URL: https://developers.google.com/identity/protocols/OAuth2WebServer -->
<template name="getAccessTokenFromServiceAccount" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="apiUrl" description="Base endpoint URL of BigQuery API."/>
    <parameter name="keyStoreLocation"
               description="The location where the p12 key file is located"/>
    <parameter name="serviceAccount" description="The value of the service Account"/>
    <parameter name="scope" description="The space delimited scope to access the API"/>
    <parameter name="accessTokenRegistryPath" description="The registry path to store the access token"/>
    <sequence>
        <property name="uri.var.apiUrl" expression="$func:apiUrl"/>
        <property name="uri.var.keyStoreLocation" expression="$func:keyStoreLocation"/>
        <property name="uri.var.serviceAccount" expression="$func:serviceAccount"/>
        <property name="uri.var.scope" expression="$func:scope"/>

        <filter source="boolean($ctx:uri.var.accessTokenRegistryPath)" regex="false">
            <then>
                <property name="uri.var.accessTokenRegistryPath"
                          value="connectors/BigQuery/accessToken"/>
            </then>
            <else>
                <property name="uri.var.accessTokenRegistryPath"
                          expression="$ctx:uri.var.accessTokenRegistryPath"/>
            </else>
        </filter>
        <property name="uri.var.accessToken"
                  expression="get-property('registry', $ctx:uri.var.accessTokenRegistryPath)"/>

        <filter xpath="$ctx:uri.var.accessToken='' or $ctx:uri.var.accessToken=null">
            <then>
                <class name="org.wso2.carbon.connector.CreateJWT"/>
                <property name="uri.var.jwt" expression="$ctx:uri.var.jwt"/>
                <property name="uri.var.grant" value="urn:ietf:params:oauth:grant-type:jwt-bearer"/>
                <payloadFactory media-type="xml">
                    <format>
                        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                            <soapenv:Header></soapenv:Header>
                            <soapenv:Body>
                                <root>
                                    <grant_type>$1</grant_type>
                                    <assertion>$2</assertion>
                                </root>
                            </soapenv:Body>
                        </soapenv:Envelope>
                    </format>
                    <args>
                        <arg expression="get-property('uri.var.grant')"/>
                        <arg expression="get-property('uri.var.jwt')"/>
                    </args>
                </payloadFactory>
                <header name="Transfer-Encoding" action="remove" scope="transport"/>
                <property name="messageType" value="application/x-www-form-urlencoded"
                          scope="axis2"/>
                <call>
                    <endpoint>
                        <http method="post"
                              uri-template="{+uri.var.apiUrl}/oauth2/v4/token"/>
                    </endpoint>
                </call>
                <property name="uri.var.accessToken" expression="json-eval($.access_token)"/>
                <script language="js">
                    <![CDATA[
                            importPackage(Packages.org.apache.synapse.config);
                            var newAccess = mc.getProperty('uri.var.accessToken');
                            var newAccessRegistryPath = mc.getProperty('uri.var.accessTokenRegistryPath');
                            if(newAccess != null && newAccess != ''){
                                //Create the registry entry if no such entry exists.
                                mc.getConfiguration().getRegistry().newResource(newAccessRegistryPath,false);
                                mc.getConfiguration().getRegistry().updateResource(newAccessRegistryPath,newAccess);
                            }
                            ]]>
                </script>
            </then>
            <else>
                <header name="Transfer-Encoding" action="remove" scope="transport"/>
                <call>
                    <endpoint>
                        <http method="get"
                              uri-template="{uri.var.apiUrl}/oauth2/v1/tokeninfo?access_token={uri.var.accessToken}"/>
                    </endpoint>
                </call>
                <property name="error" expression="json-eval($.error)"/>
                <filter source="$ctx:error='invalid_token'"
                        regex="true">
                    <class name="org.wso2.carbon.connector.CreateJWT"/>
                    <property name="uri.var.jwt" expression="$ctx:uri.var.jwt"/>
                    <property name="uri.var.grant"
                              value="urn:ietf:params:oauth:grant-type:jwt-bearer"/>
                    <payloadFactory media-type="xml">
                        <format>
                            <soapenv:Envelope
                                    xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                                <soapenv:Header></soapenv:Header>
                                <soapenv:Body>
                                    <root>
                                        <grant_type>$1</grant_type>
                                        <assertion>$2</assertion>
                                    </root>
                                </soapenv:Body>
                            </soapenv:Envelope>
                        </format>
                        <args>
                            <arg expression="get-property('uri.var.grant')"/>
                            <arg expression="get-property('uri.var.jwt')"/>
                        </args>
                    </payloadFactory>
                    <header name="Transfer-Encoding" action="remove" scope="transport"/>
                    <property name="messageType" value="application/x-www-form-urlencoded"
                              scope="axis2"/>
                    <call>
                        <endpoint>
                            <http method="post"
                                  uri-template="legacy-encoding:{uri.var.apiUrl}/oauth2/v4/token"/>
                        </endpoint>
                    </call>
                    <property name="uri.var.accessToken"
                              expression="json-eval($.access_token)"/>
                    <script language="js">
                        <![CDATA[
                            importPackage(Packages.org.apache.synapse.config);
                            var newAccess = mc.getProperty('uri.var.accessToken');
                            var newAccessRegistryPath = mc.getProperty('uri.var.accessTokenRegistryPath');
                            if(newAccess != null && newAccess != ''){
                                //Create the registry entry if no such entry exists.
                                mc.getConfiguration().getRegistry().newResource(newAccessRegistryPath,false);
                                mc.getConfiguration().getRegistry().updateResource(newAccessRegistryPath,newAccess);
                            }
                            ]]>
                    </script>
                </filter>
            </else>
        </filter>
        <header name="Authorization" expression="fn:concat('Bearer ', $ctx:uri.var.accessToken)"
                scope="transport"/>
        <header name="Cache-Control" action="remove" scope="transport"/>
        <header name="Pragma" action="remove" scope="transport"/>
    </sequence>
</template>
